{"ast":null,"code":"// Mock data for testing - remove when real API is working\nconst mockEnrollments = [{\n  id: 1,\n  course_name: \"Computer Networks\",\n  course_code: \"NET2010\",\n  student_id: 1\n}, {\n  id: 2,\n  course_name: \"3D Animation\",\n  course_code: \"ANI3010\",\n  student_id: 1\n}, {\n  id: 3,\n  course_name: \"Database Management Systems\",\n  course_code: \"DBMS2010\",\n  student_id: 1\n}];\nconst mockReports = [{\n  id: 1,\n  course_name: \"Computer Networks\",\n  course_code: \"NET2010\",\n  lecturer_name: \"Dr. Smith\",\n  date_of_lecture: \"2024-01-15\",\n  topic_taught: \"Network Protocols and TCP/IP\",\n  actual_students_present: 25,\n  total_students_registered: 30,\n  venue: \"Lab 101\",\n  week_of_reporting: 6,\n  created_at: new Date().toISOString(),\n  learning_outcomes: \"Understand TCP/IP protocol stack and network layers\"\n}, {\n  id: 2,\n  course_name: \"3D Animation\",\n  course_code: \"ANI3010\",\n  lecturer_name: \"Prof. Johnson\",\n  date_of_lecture: \"2024-01-16\",\n  topic_taught: \"3D Modeling Basics\",\n  actual_students_present: 18,\n  total_students_registered: 20,\n  venue: \"Studio A\",\n  week_of_reporting: 6,\n  created_at: new Date().toISOString(),\n  learning_outcomes: \"Learn basic 3D modeling techniques and tools\"\n}, {\n  id: 3,\n  course_name: \"Database Management Systems\",\n  course_code: \"DBMS2010\",\n  lecturer_name: \"Dr. Brown\",\n  date_of_lecture: \"2024-01-17\",\n  topic_taught: \"SQL Queries and Joins\",\n  actual_students_present: 22,\n  total_students_registered: 25,\n  venue: \"Room 205\",\n  week_of_reporting: 6,\n  created_at: new Date().toISOString(),\n  learning_outcomes: \"Master SQL query writing and table joins\"\n}];\n\n// Updated API functions with mock data fallback\nexport const getStudentMonitoring = async studentId => {\n  try {\n    console.log('üéì Fetching student monitoring for:', studentId);\n    const response = await API.get(`/students/${studentId}/monitoring`);\n    return response;\n  } catch (error) {\n    console.warn('‚ö†Ô∏è API failed, using mock data for monitoring');\n    // Return mock data that matches enrolled courses\n    const mockData = mockReports.filter(report => mockEnrollments.some(enrollment => enrollment.course_code === report.course_code));\n    return {\n      data: mockData\n    };\n  }\n};\nexport const getStudentEnrollments = async studentId => {\n  try {\n    console.log('üìö Fetching student enrollments for:', studentId);\n    const response = await API.get(`/students/${studentId}/enrollments`);\n    return response;\n  } catch (error) {\n    console.warn('‚ö†Ô∏è API failed, using mock data for enrollments');\n    return {\n      data: mockEnrollments\n    };\n  }\n};\nexport const getStudentRatings = async studentId => {\n  try {\n    console.log('üìä Fetching student ratings for:', studentId);\n    const response = await API.get(`/students/${studentId}/ratings`);\n    return response;\n  } catch (error) {\n    console.warn('‚ö†Ô∏è API failed, using mock data for ratings');\n    return {\n      data: []\n    }; // Empty ratings for now\n  }\n};","map":{"version":3,"names":["mockEnrollments","id","course_name","course_code","student_id","mockReports","lecturer_name","date_of_lecture","topic_taught","actual_students_present","total_students_registered","venue","week_of_reporting","created_at","Date","toISOString","learning_outcomes","getStudentMonitoring","studentId","console","log","response","API","get","error","warn","mockData","filter","report","some","enrollment","data","getStudentEnrollments","getStudentRatings"],"sources":["C:/Users/USER/MPHOFE/lecturer-reporting-system/frontend/src/services/api.js"],"sourcesContent":["// Mock data for testing - remove when real API is working\r\nconst mockEnrollments = [\r\n  {\r\n    id: 1,\r\n    course_name: \"Computer Networks\",\r\n    course_code: \"NET2010\",\r\n    student_id: 1\r\n  },\r\n  {\r\n    id: 2,\r\n    course_name: \"3D Animation\", \r\n    course_code: \"ANI3010\",\r\n    student_id: 1\r\n  },\r\n  {\r\n    id: 3,\r\n    course_name: \"Database Management Systems\",\r\n    course_code: \"DBMS2010\", \r\n    student_id: 1\r\n  }\r\n];\r\n\r\nconst mockReports = [\r\n  {\r\n    id: 1,\r\n    course_name: \"Computer Networks\",\r\n    course_code: \"NET2010\",\r\n    lecturer_name: \"Dr. Smith\",\r\n    date_of_lecture: \"2024-01-15\",\r\n    topic_taught: \"Network Protocols and TCP/IP\",\r\n    actual_students_present: 25,\r\n    total_students_registered: 30,\r\n    venue: \"Lab 101\",\r\n    week_of_reporting: 6,\r\n    created_at: new Date().toISOString(),\r\n    learning_outcomes: \"Understand TCP/IP protocol stack and network layers\"\r\n  },\r\n  {\r\n    id: 2,\r\n    course_name: \"3D Animation\",\r\n    course_code: \"ANI3010\",\r\n    lecturer_name: \"Prof. Johnson\", \r\n    date_of_lecture: \"2024-01-16\",\r\n    topic_taught: \"3D Modeling Basics\",\r\n    actual_students_present: 18,\r\n    total_students_registered: 20,\r\n    venue: \"Studio A\",\r\n    week_of_reporting: 6,\r\n    created_at: new Date().toISOString(),\r\n    learning_outcomes: \"Learn basic 3D modeling techniques and tools\"\r\n  },\r\n  {\r\n    id: 3,\r\n    course_name: \"Database Management Systems\",\r\n    course_code: \"DBMS2010\",\r\n    lecturer_name: \"Dr. Brown\",\r\n    date_of_lecture: \"2024-01-17\",\r\n    topic_taught: \"SQL Queries and Joins\",\r\n    actual_students_present: 22,\r\n    total_students_registered: 25,\r\n    venue: \"Room 205\",\r\n    week_of_reporting: 6,\r\n    created_at: new Date().toISOString(),\r\n    learning_outcomes: \"Master SQL query writing and table joins\"\r\n  }\r\n];\r\n\r\n// Updated API functions with mock data fallback\r\nexport const getStudentMonitoring = async (studentId) => {\r\n  try {\r\n    console.log('üéì Fetching student monitoring for:', studentId);\r\n    const response = await API.get(`/students/${studentId}/monitoring`);\r\n    return response;\r\n  } catch (error) {\r\n    console.warn('‚ö†Ô∏è API failed, using mock data for monitoring');\r\n    // Return mock data that matches enrolled courses\r\n    const mockData = mockReports.filter(report => \r\n      mockEnrollments.some(enrollment => enrollment.course_code === report.course_code)\r\n    );\r\n    return { data: mockData };\r\n  }\r\n};\r\n\r\nexport const getStudentEnrollments = async (studentId) => {\r\n  try {\r\n    console.log('üìö Fetching student enrollments for:', studentId);\r\n    const response = await API.get(`/students/${studentId}/enrollments`);\r\n    return response;\r\n  } catch (error) {\r\n    console.warn('‚ö†Ô∏è API failed, using mock data for enrollments');\r\n    return { data: mockEnrollments };\r\n  }\r\n};\r\n\r\nexport const getStudentRatings = async (studentId) => {\r\n  try {\r\n    console.log('üìä Fetching student ratings for:', studentId);\r\n    const response = await API.get(`/students/${studentId}/ratings`);\r\n    return response;\r\n  } catch (error) {\r\n    console.warn('‚ö†Ô∏è API failed, using mock data for ratings');\r\n    return { data: [] }; // Empty ratings for now\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}